module Game.Generate exposing (..)

import Game exposing (Game)
import Level exposing (Level, LevelAmount)
import Stage
import StaticArray exposing (StaticArray)


levels : StaticArray LevelAmount (Int -> Maybe Game)
levels =
    ( level0
    , [ level1
      , level2
      , level2
      ]
    )
        |> StaticArray.fromList Level.maxLevel


level0 : Int -> Maybe Game
level0 stage =
    case stage of
        1 ->
            Stage.parse
                [ "â¬›â¬›ğŸŸ¥â¬›"
                , "ğŸ”˜â¬œâ¬œâ¬›"
                , "â¬›â¬œâ¬œâ¬›"
                , "â¬›â¬›â¬›â¬›"
                ]
                |> Game.fromStage
                |> Just

        2 ->
            Stage.parse
                [ "â¬›â¬›ğŸŸ¥â¬›"
                , "ğŸ”˜â¬œâ¬œğŸŸ¥"
                , "â¬›â¬œâ¬œâ¬›"
                , "â¬›â¬›ğŸ”˜â¬›"
                ]
                |> Game.fromStage
                |> Just

        _ ->
            Nothing


{-| We have to start with these three stages, because you always need three varients in order to solve all levels

An alternative to this would be to introduce a stage that is just a crossing. But this is not really fun.

So this is the next best thing.

-}
level1 : Int -> Maybe Game
level1 stage =
    case stage of
        1 ->
            --player is forced to cross lines
            Stage.parse
                [ "â¬›ğŸ”˜â¬›â¬›ğŸŸ¥â¬›"
                , "ğŸŸ¥â¬œâ¬œâ¬œâ¬œğŸ”˜"
                , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                , "ğŸ”˜â¬œâ¬œâ¬œâ¬œâ¬›"
                , "â¬›ğŸŸ¥â¬›â¬›â¬›â¬›"
                ]
                |> Game.fromStage
                |> Just

        2 ->
            --player learns that lasers will prefer straight lines
            Stage.parse
                [ "â¬›ğŸŸ¥â¬›â¬›ğŸ”˜â¬›"
                , "ğŸ”˜â¬œâ¬œâ¬œâ¬œâ¬›"
                , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                , "ğŸŸ¥â¬œâ¬œâ¬œâ¬œğŸ”˜"
                , "â¬›â¬›â¬›â¬›ğŸŸ¥â¬›"
                ]
                |> Game.fromStage
                |> Just

        3 ->
            --player will not be able to make a straight line
            Stage.parse
                [ "â¬›ğŸ”˜â¬›â¬›ğŸŸ¥â¬›"
                , "ğŸ”˜â¬œâ¬œâ¬œâ¬œâ¬›"
                , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                , "ğŸŸ¥â¬œâ¬œâ¬œâ¬œğŸŸ¥"
                , "â¬›â¬›â¬›â¬›ğŸ”˜â¬›"
                ]
                |> Game.fromStage
                |> Just

        _ ->
            Nothing


level2 stage =
    case stage of
        1 ->
            Stage.parse
                [ "â¬›â¬›ğŸŸ¥ğŸŸ¥â¬›â¬›"
                , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                , "ğŸ”˜â¬œâ¬œâ¬œâ¬œğŸŸ¥"
                , "ğŸ”˜â¬œâ¬œâ¬œâ¬œâ¬›"
                , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                , "â¬›â¬›ğŸ”˜â¬›â¬›â¬›"
                ]
                |> Game.fromStage
                |> Just

        2 ->
            Stage.parse
                [ "â¬›â¬›ğŸŸ¥ğŸŸ¥â¬›â¬›"
                , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                , "ğŸ”˜â¬œâ¬œâ¬œâ¬œâ¬›"
                , "ğŸŸ¥â¬œâ¬œâ¬œâ¬œğŸ”˜"
                , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                , "â¬›â¬›â¬›ğŸ”˜â¬›â¬›"
                ]
                |> Game.fromStage
                |> Just

        3 ->
            Stage.parse
                [ "â¬›â¬›ğŸ”˜ğŸ”˜â¬›â¬›"
                , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                , "ğŸŸ¥â¬œâ¬œâ¬œâ¬œâ¬›"
                , "ğŸ”˜â¬œâ¬œâ¬œâ¬œğŸŸ¥"
                , "â¬›â¬œâ¬œâ¬œâ¬œâ¬›"
                , "â¬›â¬›â¬›ğŸŸ¥â¬›â¬›"
                ]
                |> Game.fromStage
                |> Just

        _ ->
            Nothing


new : { level : Level, stage : Int } -> Maybe Game
new args =
    levels
        |> StaticArray.get args.level
        |> (\fun -> fun args.stage)
